#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function generatePRComment(reviewFilePath) {
  try {
    const reviewData = JSON.parse(fs.readFileSync(reviewFilePath, 'utf8'));
    
    const totalFiles = reviewData.metadata.totalFiles;
    const filesWithIssues = reviewData.metadata.filesWithIssues;
    const results = reviewData.results;
    
    // Categorize issues by severity
    const criticalIssues = results.filter(r => 
      r.hasIssues && (r.feedback.includes('Critical') || r.feedback.includes('🚨'))
    );
    const highIssues = results.filter(r => 
      r.hasIssues && (r.feedback.includes('High') || r.feedback.includes('⚠️')) && !criticalIssues.includes(r)
    );
    const mediumIssues = results.filter(r => 
      r.hasIssues && !criticalIssues.includes(r) && !highIssues.includes(r)
    );
    
    let comment = `## 🤖 AI Code Review Results\n\n`;
    
    // Summary section
    comment += `### 📊 Summary\n`;
    comment += `- **Files Reviewed:** ${totalFiles}\n`;
    comment += `- **Files with Issues:** ${filesWithIssues}\n`;
    comment += `- **Critical Issues:** ${criticalIssues.length} 🚨\n`;
    comment += `- **High Priority Issues:** ${highIssues.length} ⚠️\n`;
    comment += `- **Other Issues:** ${mediumIssues.length} 💡\n\n`;
    
    // Overall status
    if (criticalIssues.length > 0) {
      comment += `### 🚨 Action Required\n`;
      comment += `Critical issues found that should be addressed before merging.\n\n`;
    } else if (highIssues.length > 0) {
      comment += `### ⚠️ Review Recommended\n`;
      comment += `High priority issues found that should be reviewed.\n\n`;
    } else if (filesWithIssues > 0) {
      comment += `### 💡 Minor Issues Found\n`;
      comment += `Some minor improvements suggested but no blocking issues.\n\n`;
    } else {
      comment += `### ✅ All Clear!\n`;
      comment += `No issues found in the reviewed code. Great work!\n\n`;
    }
    
    // Critical issues section
    if (criticalIssues.length > 0) {
      comment += `### 🚨 Critical Issues\n\n`;
      criticalIssues.forEach(result => {
        comment += `#### \`${result.filePath}\`\n`;
        comment += extractKeyIssues(result.feedback, 'critical') + '\n\n';
      });
    }
    
    // High priority issues section
    if (highIssues.length > 0) {
      comment += `### ⚠️ High Priority Issues\n\n`;
      highIssues.forEach(result => {
        comment += `#### \`${result.filePath}\`\n`;
        comment += extractKeyIssues(result.feedback, 'high') + '\n\n';
      });
    }
    
    // Collapsible section for other issues
    if (mediumIssues.length > 0) {
      comment += `<details>\n<summary>💡 Other Suggestions (${mediumIssues.length} files)</summary>\n\n`;
      mediumIssues.forEach(result => {
        comment += `#### \`${result.filePath}\`\n`;
        comment += extractKeyIssues(result.feedback, 'medium') + '\n\n';
      });
      comment += `</details>\n\n`;
    }
    
    // Footer
    comment += `---\n`;
    comment += `*Generated by [Code Review Agent](https://github.com/your-org/code-review-agent) • `;
    comment += `Template: ${results[0]?.template || 'combined'} • `;
    comment += `Tokens: ${reviewData.metadata.totalTokensUsed?.toLocaleString() || 'N/A'}*\n`;
    
    return comment;
    
  } catch (error) {
    console.error('Error generating PR comment:', error);
    return `## 🤖 AI Code Review Results\n\n❌ Error generating review results. Check the workflow logs for details.\n`;
  }
}

function extractKeyIssues(feedback, severity) {
  const lines = feedback.split('\n');
  let keyIssues = [];
  let currentSection = '';
  
  // Look for issue patterns
  for (const line of lines) {
    const trimmed = line.trim();
    
    // Skip empty lines
    if (!trimmed) continue;
    
    // Detect sections
    if (trimmed.startsWith('##') || trimmed.startsWith('**') && trimmed.endsWith('**')) {
      currentSection = trimmed;
      continue;
    }
    
    // Look for specific issue indicators
    const isCritical = trimmed.includes('Critical') || trimmed.includes('🚨') || 
                      trimmed.includes('Vulnerability') || trimmed.includes('Security');
    const isHigh = trimmed.includes('High') || trimmed.includes('⚠️') || 
                   trimmed.includes('Performance') || trimmed.includes('should');
    const isIssue = trimmed.startsWith('- ') || trimmed.startsWith('* ') || 
                    trimmed.includes('Issue:') || trimmed.includes('Problem:');
    
    if (isIssue) {
      if (severity === 'critical' && isCritical) {
        keyIssues.push(trimmed);
      } else if (severity === 'high' && (isHigh || isCritical)) {
        keyIssues.push(trimmed);
      } else if (severity === 'medium') {
        keyIssues.push(trimmed);
      }
    }
  }
  
  // If no specific issues found, extract first few meaningful lines
  if (keyIssues.length === 0) {
    const meaningfulLines = lines
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#') && line.length > 10)
      .slice(0, 3);
    keyIssues = meaningfulLines;
  }
  
  // Limit to avoid overly long comments
  const maxIssues = severity === 'critical' ? 5 : 3;
  const displayIssues = keyIssues.slice(0, maxIssues);
  
  if (keyIssues.length > maxIssues) {
    displayIssues.push(`... and ${keyIssues.length - maxIssues} more issues`);
  }
  
  return displayIssues.map(issue => `- ${issue.replace(/^[-*]\s*/, '')}`).join('\n');
}

// Main execution
if (require.main === module) {
  const reviewFile = process.argv[2];
  
  if (!reviewFile) {
    console.error('Usage: node generate-pr-comment.js <review-results.json>');
    process.exit(1);
  }
  
  if (!fs.existsSync(reviewFile)) {
    console.error(`Review file not found: ${reviewFile}`);
    process.exit(1);
  }
  
  const comment = generatePRComment(reviewFile);
  console.log(comment);
}

module.exports = { generatePRComment };
